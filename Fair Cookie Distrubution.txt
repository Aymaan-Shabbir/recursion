class Solution {
    // Result variable to store minimum unfairness
    int result = Integer.MAX_VALUE;

    public int distributeCookies(int[] cookies, int k) {
        // har bacche ke paas kitni cookies hain uska record
        int children[] = new int[k];

        // recursive helper function
        helper(cookies, k, 0, children);
        return result;
    }

    public void helper(int[] cookies, int k, int idx, int children[]) {

        // Base Case: saari cookies distribute ho gayi hain
        if (idx >= cookies.length) {
            int max = Integer.MIN_VALUE;
            
            // sabse zyada cookies wale bacche ko find karo
            for (int i = 0; i < k; i++) {
                max = Math.max(max, children[i]);
            }

            // result ko update karo agar yeh unfairness kam hai
            result = Math.min(result, max);
            return;
        }

        int cookie = cookies[idx]; // current cookie

        // Try har cookie ko har bacche ko dene ka
        for (int i = 0; i < k; i++) {
            children[i] += cookie;            // bacche ko cookie do
            helper(cookies, k, idx + 1, children); // next cookie ke liye call
            children[i] -= cookie;            // backtrack karo (cookie wapas lo)

            // ⚠️ Optimization:
            // Agar bacche ko abhi tak koi cookie nahi mili thi,
            // to aage ke similar cases same hi honge (duplicate) → skip karo
            if (children[i] == 0) break;
        }
    }
}
